name: SSH

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"
  push:
    branches:
      - main
    tags:
      - v*
    paths:
      - .github/workflows/ssh.yml

jobs:
  kubernetes:
    name: Kubernetes
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        site:
          - ger-flb-bl8
          - den-sdb-osg18
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Deploy k3s
        uses: appleboy/ssh-action@master
        with:
          script_stop: true
          proxy_host: ${{ secrets.SSH_PROXY_HOST }}
          proxy_fingerprint: ${{ secrets.SSH_PROXY_FINGERPRINT }}
          proxy_username: ${{ secrets.SSH_PROXY_USER }}
          proxy_key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_TARGET_HOST }}
          fingerprint: ${{ secrets.SSH_TARGET_FINGERPRINT }}
          username: ${{ secrets.SSH_TARGET_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            curl -sfL https://get.k3s.io | sudo sh -s - \
              --advertise-address $(host -t a ${{ secrets.SITE_FQDN }} | cut -d ' ' -f4) \
              --tls-san ${{ secrets.SITE_FQDN }} \
              --disable traefik \
              --write-kubeconfig-mode 644 \
              --selinux
            mkdir -p -m 700 .kube
            sudo cp -f /etc/rancher/k3s/k3s.yaml .kube/config
            sudo chown ${{ secrets.SSH_TARGET_USER }}:${{ secrets.SSH_TARGET_USER }} .kube/config
            sudo chmod 600 .kube/config

      - name: Download kubeconfig
        uses: nicklasfrahm/scp-action@main
        with:
          direction: download
          proxy_host: ${{ secrets.SSH_PROXY_HOST }}
          proxy_fingerprint: ${{ secrets.SSH_PROXY_FINGERPRINT }}
          proxy_username: ${{ secrets.SSH_PROXY_USER }}
          proxy_key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_TARGET_HOST }}
          fingerprint: ${{ secrets.SSH_TARGET_FINGERPRINT }}
          username: ${{ secrets.SSH_TARGET_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: /etc/rancher/k3s/k3s.yaml
          target: kubeconfig.yml

      - name: Adjust API server URL
        run: sed -i s/127.0.0.1/${{ secrets.SITE_FQDN }}/g kubeconfig.yml

      - name: Create secret for kubeconfig
        run: |
          echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
          gh secret set KUBECONFIG -r ${{ github.repository }} -e ${{ matrix.site }} < kubeconfig.yml

  traefik:
    name: Ingress controller
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - kubernetes
    strategy:
      fail-fast: false
      matrix:
        site:
          - den-sdb-osg18
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install traefik
        run: |
          kubectl create namespace traefik || true
          helm repo add traefik https://helm.traefik.io/traefik
          helm repo update
          helm upgrade traefik traefik/traefik --atomic -i -n traefik -f deployments/global/traefik-values.yml

  cert-manager:
    name: Certificate manager
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - kubernetes
    strategy:
      fail-fast: false
      matrix:
        site:
          - den-sdb-osg18
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install cert-manager
        run: |
          kubectl create namespace cert-manager || true
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade \
            --install \
            --atomic \
            --namespace cert-manager \
            --set installCRDs=true \
            cert-manager jetstack/cert-manager
          kubectl apply -f deployments/global/cert-manager-manifests.yml

  # The main point of this job is to synchronize the state
  # of the deployment in GitHub. In the future we could
  # set up some actual tests to evaluate the cluster health.
  test:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - traefik
      - cert-manager
    strategy:
      fail-fast: false
      matrix:
        site:
          - den-sdb-osg18
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Display nodes and node load
        run: |
          kubectl get nodes
          kubectl top nodes
