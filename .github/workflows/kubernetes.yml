name: Kubernetes

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"
  push:
    branches:
      - main
    paths:
      - .github/workflows/kubernetes.yml

jobs:
  cluster:
    name: Cluster
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        site:
          - tph99
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install private key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Deploy k3s
        uses: nicklasfrahm/k3se@v0
        with:
          config: deploy/k3se/tph99.yml

      - name: Create secret for kubeconfig
        run: |
          echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
          gh secret set KUBECONFIG -r ${{ github.repository }} -e ${{ matrix.site }} < ~/.kube/config

      - name: Uninstall private key
        run: rm ~/.ssh/id_ed25519

  # traefik:
  #   name: Ingress controller
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - kubernetes
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       site:
  #         - de-sh-flb-plk42
  #   environment:
  #     name: ${{ matrix.site }}
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Install helm
  #       uses: azure/setup-helm@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Install traefik
  #       run: |
  #         kubectl create namespace traefik || true
  #         helm repo add traefik https://helm.traefik.io/traefik
  #         helm repo update
  #         helm upgrade traefik traefik/traefik --atomic -i -n traefik -f deploy/global/traefik-values.yml

  # cert-manager:
  #   name: Certificate manager
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - kubernetes
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       site:
  #         - de-sh-flb-plk42
  #   environment:
  #     name: ${{ matrix.site }}
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Install helm
  #       uses: azure/setup-helm@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Install cert-manager
  #       run: |
  #         kubectl create namespace cert-manager || true
  #         helm repo add jetstack https://charts.jetstack.io
  #         helm repo update
  #         helm upgrade \
  #           --install \
  #           --atomic \
  #           --namespace cert-manager \
  #           --set installCRDs=true \
  #           cert-manager jetstack/cert-manager
  #         kubectl apply -f deploy/global/cert-manager-manifests.yml

  # # The main point of this job is to synchronize the state
  # # of the deployment in GitHub. In the future we could
  # # set up some actual tests to evaluate the cluster health.
  # test:
  #   name: Test
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - traefik
  #     - cert-manager
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       site:
  #         - de-sh-flb-plk42
  #   environment:
  #     name: ${{ matrix.site }}
  #   steps:
  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Display nodes and node load
  #       run: |
  #         kubectl get nodes
  #         kubectl top nodes
