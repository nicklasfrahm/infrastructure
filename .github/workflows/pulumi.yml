name: Pulumi

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
  schedule:
    - cron: "0 0 * * *"

jobs:
  dns:
    name: DNS
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: "1.16"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ github.repository_owner }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Preview planned changes
        uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: dns
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  # k3s:
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: sonderborg
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Deploy k3s
  #       uses: appleboy/ssh-action@master
  #       with:
  #         script_stop: true
  #         username: ${{ secrets.SSH_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         host: ${{ secrets.SSH_TARGET_HOST }}.${{ secrets.FQDN }}
  #         fingerprint: ${{ secrets.SSH_TARGET_FINGERPRINT }}
  #         proxy_username: ${{ secrets.SSH_USER }}
  #         proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         proxy_host: ${{ secrets.SSH_PROXY_HOST }}.${{ secrets.FQDN }}
  #         proxy_fingerprint: ${{ secrets.SSH_PROXY_FINGERPRINT }}
  #         script: |
  #           curl -sfL https://get.k3s.io | sudo sh -s - \
  #             --advertise-address $(host -t a api.${{ secrets.FQDN }} | cut -d ' ' -f4) \
  #             --tls-san api.${{ secrets.FQDN }} \
  #             --disable traefik \
  #             --write-kubeconfig-mode 644 \
  #             --selinux
  #           mkdir -p -m 700 /home/${{ secrets.SSH_USER }}/.kube
  #           sudo cp -f /etc/rancher/k3s/k3s.yaml /home/${{ secrets.SSH_USER }}/.kube/config
  #           sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/${{ secrets.SSH_USER }}/.kube/config
  #           sudo chmod 600 /home/${{ secrets.SSH_USER }}/.kube/config
  #           sed -i s/127.0.0.1/api.${{ secrets.FQDN }}/g /home/${{ secrets.SSH_USER }}/.kube/config

  #     - name: Download kubeconfig
  #       uses: nicklasfrahm/scp-action@main
  #       with:
  #         direction: download
  #         username: ${{ secrets.SSH_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         host: ${{ secrets.SSH_TARGET_HOST }}.${{ secrets.FQDN }}
  #         fingerprint: ${{ secrets.SSH_TARGET_FINGERPRINT }}
  #         proxy_username: ${{ secrets.SSH_USER }}
  #         proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         proxy_host: ${{ secrets.SSH_PROXY_HOST }}.${{ secrets.FQDN }}
  #         proxy_fingerprint: ${{ secrets.SSH_PROXY_FINGERPRINT }}
  #         source: /etc/rancher/k3s/k3s.yaml
  #         target: kubeconfig.yml

  #     - name: Adjust API server URL
  #       run: sed -i s/127.0.0.1/api.${{ secrets.FQDN }}/g kubeconfig.yml

  #     - name: Update kubeconfig secret (nicklasfrahm/infrastructure)
  #       uses: nicklasfrahm/file-secret-action@main
  #       with:
  #         token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #         scope: ${{ github.repository }}
  #         secret: KUBECONFIG
  #         file: kubeconfig.yml

  #     - name: Update kubeconfig secret (nicklasfrahm/showcases)
  #       uses: nicklasfrahm/file-secret-action@main
  #       with:
  #         token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #         scope: mykilio/mykilio.go
  #         secret: KUBECONFIG
  #         file: kubeconfig.yml

  # # TODO: Move the cluster services jobs to seperate workflows to ensure that they always have the most recent KUBECONFIG.
  # traefik:
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - k3s
  #   environment:
  #     name: sonderborg
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Install helm
  #       uses: azure/setup-helm@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Install traefik
  #       run: |
  #         kubectl create namespace traefik || true
  #         helm repo add traefik https://helm.traefik.io/traefik
  #         helm repo update
  #         helm upgrade traefik traefik/traefik --atomic -i -n traefik -f helm/traefik.yml

  # cert-manager:
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - k3s
  #   environment:
  #     name: sonderborg
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Install helm
  #       uses: azure/setup-helm@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Install cert-manager
  #       run: |
  #         kubectl create namespace cert-manager || true
  #         helm repo add jetstack https://charts.jetstack.io
  #         helm repo update
  #         helm upgrade \
  #           --install \
  #           --atomic \
  #           --namespace cert-manager \
  #           --set installCRDs=true \
  #           cert-manager jetstack/cert-manager
  #         envsubst < kubernetes/cert-manager.yml | kubectl apply -f -
