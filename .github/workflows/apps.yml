name: Apps

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"
  push:
    branches:
      - main
    tags:
      - v*
    paths:
      - deployments/**
      - .github/workflows/apps.yml

jobs:
  apps:
    name: Apps
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        site:
          - de-sh-flb-bl8
    environment:
      name: ${{ matrix.site }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

        # TODO: How to handle deployment failures? Via `git revert` and Pulumi?
      - name: Install applications
        run: ls deployments/${{ matrix.site }} | xargs -I {} cat deployments/${{ matrix.site }}/{} | envsubst | kubectl apply -f -

  # TODO: Set this up via Pulumi and `kubernetesx` so that environments can
  # also be deprovisioned by simply removing them from this repository.
  # environments:
  #   name: Environments
  #   if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       site:
  #         - SITE_NAME
  #       repository:
  #         - nicklasfrahm/snek
  #   environment:
  #     name: ${{ matrix.site }}
  #   env:
  #     SERVICE_ACCOUNT: github-actions
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v1

  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -m 700 -p ~/.kube
  #         echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
  #         chmod 600 ~/.kube/config

  #     - name: Generate namespace name
  #       run: echo NAMESPACE=$(echo -n ${{ matrix.repository }} | tr '/' '-') >> $GITHUB_ENV

  #     - name: Create environment namespace and service account
  #       run: |
  #         echo $NAMESPACE
  #         envsubst < deployments/global/environment-manifests.yml | kubectl apply -f -
  #       env:
  #         NAMESPACE: ${{ env.NAMESPACE }}

  #     - name: Get service account token secret name
  #       run: echo TOKEN_SECRET=$(kubectl -n $NAMESPACE get sa $SERVICE_ACCOUNT -o jsonpath='{.secrets[0].name}') >> $GITHUB_ENV
  #       env:
  #         NAMESPACE: ${{ env.NAMESPACE }}

  #     - name: Fetch service account token
  #       run: echo TOKEN=$(kubectl -n $NAMESPACE get secret $TOKEN_SECRET -o jsonpath='{.data.token}' | base64 -d) >> $GITHUB_ENV
  #       env:
  #         NAMESPACE: ${{ env.NAMESPACE }}
  #         TOKEN_SECRET: ${{ env.TOKEN_SECRET }}

  #     # Reference: https://docs.armory.io/armory-enterprise/armory-admin/manual-service-account/#get-the-service-account-and-token
  #     - name: Create namespaced kubeconfig
  #       run: |
  #         kubectl config view --flatten --minify > ${KUBECONFIG_FILE}.tmp
  #         kubectl config --kubeconfig ${KUBECONFIG_FILE}.tmp rename-context $(kubectl config current-context) ${SERVICE_ACCOUNT}
  #         kubectl config --kubeconfig ${KUBECONFIG_FILE}.tmp set-credentials ${SERVICE_ACCOUNT} --token ${TOKEN}
  #         kubectl config --kubeconfig ${KUBECONFIG_FILE}.tmp set-context ${SERVICE_ACCOUNT} --user ${SERVICE_ACCOUNT}
  #         kubectl config --kubeconfig ${KUBECONFIG_FILE}.tmp set-context ${SERVICE_ACCOUNT} --namespace ${NAMESPACE}
  #         kubectl config --kubeconfig ${KUBECONFIG_FILE}.tmp view --flatten --minify > ${KUBECONFIG_FILE}
  #         rm ${KUBECONFIG_FILE}.tmp
  #       env:
  #         KUBECONFIG_FILE: kubeconfig.yml
  #         NAMESPACE: ${{ env.NAMESPACE }}
  #         TOKEN: ${{ env.TOKEN }}

  #     - name: Upload kubeconfig as pipeline secret
  #       run: |
  #         echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
  #         gh secret set KUBECONFIG -R ${{ matrix.repository }} -e ${{ matrix.site }} < kubeconfig.yml
